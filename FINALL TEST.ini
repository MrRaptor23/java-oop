
Для реализации данного проекта на языке Java необходимо выполнить следующие шаги:
Создание класса-конструктора. Данный класс будет содержать три поля игрушки - id, название и частоту выпадения. Для создания класса необходимо открыть новый файл с расширением .java и написать следующий код:
public class Toy {
private int id;
private String name;
private double frequency;
public Toy(int id, String name, double frequency)
this.id = id;
this.name = name;
this.frequency = frequency;
public int getId() {
retum id;
public String getName() {
return name;
public double getFrequency() return frequency;
Где:
id - уникальный идентификатор игрушки. - name - название игрушки.
frenuen
Из строки считываем id и частоту выпадения и заполняем три массива
Для считывания и обработки строк лучше всего использовать класс Scanner. Создаём новый объект класса Scanner и указываем, что из какого источника будем вводить данные (например, из файла). Пример:
Scanner scanner = new Scanner(new File("toys.txt"));
List ids = new ArrayList();
List names = new ArrayList();
List frequencies = new ArrayList();
while (scanner.hasNextLine()) {
String line = scanner.nextLine();
String[] tokens = line.split(",");
ids.add(Integer.parseInt(tokens[0]));
names.add(tokens[1]);
frequencies.add(Double.parseDouble(tokens[2])); }
Где:
Scanner - класс для считывания данных из разных источников; - new File("toys.txt") - указание файла для чтения данных (указываем свой путь до файла или расположение в проекте); - List - интерфейс для хранения коллекций (в данном случае - трёх).
Происходит считывание данных из каждой строки файла, при помощи метода split() разбиваем строку на три поля, преобразуем их в нужные типы данных и добавляем их в соответствующие массивы.
Добавление элементов в коллекцию при помощи API-класса java.util.PriorityQueue
Для добавления элементов в коллекцию необходимо создать новый объект PriorityQueue и передать ему объекты класса Toy. PriorityQueue будет сортировать набор элементов. Частота выпадения тоя будет выступать в качестве приоритета элемента.
PriorityQueue toysQueue = new PriorityQueue(frequencies.size(),
приоритетом; - Comparator - класс, обеспечивающий сравнение объектов по заданному параметру с помощью метода comparingDouble(); - frequencies.size() - указываем сколько максимально элементов может содержать очередь (это значение может быть настолько большим, насколько это позволяет память вычислительной машины);
Toy::getFrequency - указываем на какое поле сравнивать объекты класса Toу.
Организация общей очереди
Для организации общей очереди будем использовать класс java.util.Queue, который позволяет определить методы для добавления и удаления элементов из очереди.
Queue queue = new LinkedList(); queue.addAll(toysQueue);
Где:
Queue - интерфейс коллекции, который реализуется через класс LinkedList. Этот класс реализует связный список элементов; - toysQueue - добавляем все элементы из коллекции с приоритетом.
Вызов метода Get и запись результатов в файл
Для вызова метода Get из очереди необходимо использовать метод
poll(), который вытаскивает первый элемент из очереди и удаляет его.
Для записи результата в файл необходимо использовать класс FileWriter.
public void writeToFile(String filename, Queue queue) throws IOException { BufferedWriter bw = new BufferedWriter(new FileWriter(filename)); for (int i = 0; i < 10; i++)
Toy toy = queue.poll();
bw.write(toy.getId() + "," + toy.getName() + "," + toy.getFrequency() +
"n");
bw. close();
Где:
filename - имя файла, в который будем записывать результаты; - BufferedWriter - класс, который обеспечивает запись в файл данных в нужном формате (байтовая запись); - FileWriter - класс, который предоставляет возможность записывать данные в файловую систему; - queue.poll() - вытаскиваем первый элемент из очереди и удаляем его;
bw.write() - записываем данные в файл.
Итоговый код:
import java.io.* import java.util.*
public class Toy
private int id; private String name;
private double frequency;
public Toy(int id, String name, double frequency) { this.id = id; this.name = name;
this.frequency = frequency;
public int getId()
return id;
public String getName() {
retum name;
public double getFrequency() retum frequency;
public static void main(String[] args) throws IOException Scanner scanner = new Scanner(new File("toys.bxt"));
{
List ids = new ArrayList(); List names = new ArrayList(); List frequencies = new ArrayList();
while (scanner.hasNextLine()) { String line = scanner.nextLine(); String[] tokens = line. split(",");
ids.add(Integer.parseInt(tokens[0]));
names.add(tokens[1]);
frequencies.add(Double.parseDouble(tokens[2]));
PriorityQueue toysQueue = new PriorityQueue(frequencies.size(), Comparator.comparingDouble(Toy::getFrequency)); for (int i = 0; i < frequencies.size(); i++) { Toy toy = new Toy(ids.get(i), names.get(i), frequencies.get(i)); toysQueue.add(toy);
Queue queue = new LinkedList(); queue.addAll(toysQueue);
writeToFile("result.txt", queue);
public static void writeToFile(String filename, Queue queue) throws IOException
BufferedWriter bw = new BufferedWriter(new FileWriter(filename));
for (int i = 0; i < 10; i+++) {
Toy toy = queue.poll();
bw.write(toy.getId() + "," + toy.getName() + "," + toy.getFrequency()
+
"n");
bw. close();